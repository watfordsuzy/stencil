//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if WINDOWS_PHONE_APP
using RestSharp.Portable;
#else
using RestSharp;
#endif
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Stencil.SDK.Models;

namespace Stencil.SDK.Endpoints
{
    public partial class ProductVersionEndpoint : EndpointBase
    {
        public ProductVersionEndpoint(StencilSDK api)
            : base(api)
        {

        }
        
        public Task<ItemResult<ProductVersion>> GetProductVersionAsync(Guid product_version_id)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "productversions/{product_version_id}";
            request.AddUrlSegment("product_version_id", product_version_id.ToString());
            
            return this.Sdk.ExecuteAsync<ItemResult<ProductVersion>>(request);
        }
        
        public Task<ListResult<ProductVersion>> Find(int skip = 0, int take = 10, string keyword = "", string order_by = "", bool descending = false, Guid? product_id = null)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "productversions";
            request.AddParameter("skip", skip);
            request.AddParameter("take", take);
            request.AddParameter("order_by", order_by);
            request.AddParameter("descending", descending);
            request.AddParameter("keyword", keyword);
            request.AddParameter("product_id", product_id);
            
            
            return this.Sdk.ExecuteAsync<ListResult<ProductVersion>>(request);
        }
        public Task<ListResult<ProductVersion>> GetProductVersionByProductIDAsync(Guid product_id, int skip = 0, int take = 10, string order_by = "", bool descending = false)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "productversions/by_productid/{product_id}";
            request.AddUrlSegment("product_id", product_id.ToString());
            request.AddParameter("skip", skip);
            request.AddParameter("take", take);
            request.AddParameter("order_by", order_by);
            request.AddParameter("descending", descending);
            
            return this.Sdk.ExecuteAsync<ListResult<ProductVersion>>(request);
        }
        

        public Task<ItemResult<ProductVersion>> CreateProductVersionAsync(ProductVersion productversion)
        {
            var request = new RestRequest(Method.POST);
            request.Resource = "productversions";
            request.AddJsonBody(productversion);
            return this.Sdk.ExecuteAsync<ItemResult<ProductVersion>>(request);
        }

        public Task<ItemResult<ProductVersion>> UpdateProductVersionAsync(Guid product_version_id, ProductVersion productversion)
        {
            var request = new RestRequest(Method.PUT);
            request.Resource = "productversions/{product_version_id}";
            request.AddUrlSegment("product_version_id", product_version_id.ToString());
            request.AddJsonBody(productversion);
            return this.Sdk.ExecuteAsync<ItemResult<ProductVersion>>(request);
        }

        

        public Task<ActionResult> DeleteProductVersionAsync(Guid product_version_id)
        {
            var request = new RestRequest(Method.DELETE);
            request.Resource = "productversions/{product_version_id}";
            request.AddUrlSegment("product_version_id", product_version_id.ToString());
            return this.Sdk.ExecuteAsync<ActionResult>(request);
        }
    }
}
