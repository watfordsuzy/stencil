//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if WINDOWS_PHONE_APP
using RestSharp.Portable;
#else
using RestSharp;
#endif
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Stencil.SDK.Models;

namespace Stencil.SDK.Endpoints
{
    public partial class TicketEndpoint : EndpointBase
    {
        public TicketEndpoint(StencilSDK api)
            : base(api)
        {

        }
        
        public Task<ItemResult<Ticket>> GetTicketAsync(Guid ticket_id)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "tickets/{ticket_id}";
            request.AddUrlSegment("ticket_id", ticket_id.ToString());
            
            return this.Sdk.ExecuteAsync<ItemResult<Ticket>>(request);
        }
        
        public Task<ListResult<Ticket>> Find(int skip = 0, int take = 10, string keyword = "", string order_by = "", bool descending = false, Guid? reported_by_id = null, Guid? assigned_to_id = null)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "tickets";
            request.AddParameter("skip", skip);
            request.AddParameter("take", take);
            request.AddParameter("order_by", order_by);
            request.AddParameter("descending", descending);
            request.AddParameter("keyword", keyword);
            request.AddParameter("reported_by_id", reported_by_id);
            request.AddParameter("assigned_to_id", assigned_to_id);
            
            
            return this.Sdk.ExecuteAsync<ListResult<Ticket>>(request);
        }
        public Task<ListResult<Ticket>> GetTicketByReportedByIDAsync(Guid account_id, int skip = 0, int take = 10, string order_by = "", bool descending = false)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "tickets/by_reportedbyid/{account_id}";
            request.AddUrlSegment("account_id", account_id.ToString());
            request.AddParameter("skip", skip);
            request.AddParameter("take", take);
            request.AddParameter("order_by", order_by);
            request.AddParameter("descending", descending);
            
            return this.Sdk.ExecuteAsync<ListResult<Ticket>>(request);
        }
        
        public Task<ListResult<Ticket>> GetTicketByAssignedToIDAsync(Guid account_id, int skip = 0, int take = 10, string order_by = "", bool descending = false)
        {
            var request = new RestRequest(Method.GET);
            request.Resource = "tickets/by_assignedtoid/{account_id}";
            request.AddUrlSegment("account_id", account_id.ToString());
            request.AddParameter("skip", skip);
            request.AddParameter("take", take);
            request.AddParameter("order_by", order_by);
            request.AddParameter("descending", descending);
            
            return this.Sdk.ExecuteAsync<ListResult<Ticket>>(request);
        }
        

        public Task<ItemResult<Ticket>> CreateTicketAsync(Ticket ticket)
        {
            var request = new RestRequest(Method.POST);
            request.Resource = "tickets";
            request.AddJsonBody(ticket);
            return this.Sdk.ExecuteAsync<ItemResult<Ticket>>(request);
        }

        public Task<ItemResult<Ticket>> UpdateTicketAsync(Guid ticket_id, Ticket ticket)
        {
            var request = new RestRequest(Method.PUT);
            request.Resource = "tickets/{ticket_id}";
            request.AddUrlSegment("ticket_id", ticket_id.ToString());
            request.AddJsonBody(ticket);
            return this.Sdk.ExecuteAsync<ItemResult<Ticket>>(request);
        }

        

        public Task<ActionResult> DeleteTicketAsync(Guid ticket_id)
        {
            var request = new RestRequest(Method.DELETE);
            request.Resource = "tickets/{ticket_id}";
            request.AddUrlSegment("ticket_id", ticket_id.ToString());
            return this.Sdk.ExecuteAsync<ActionResult>(request);
        }
    }
}
