//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Codeable.Foundation.Common;
using Codeable.Foundation.Core;
using System;
using System.Web.Http;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using sdk = Stencil.SDK.Models;
using dm = Stencil.Domain;
using Stencil.Primary;
using Stencil.SDK;
using Stencil.Web.Controllers;
using Stencil.Web.Security;

namespace Stencil.Plugins.RestAPI.Controllers
{
    [ApiKeyHttpAuthorize]
    [RoutePrefix("api/commits")]
    public partial class CommitController : HealthRestApiController
    {
        public CommitController(IFoundation foundation)
            : base(foundation, "Commit")
        {
        }

        [HttpGet]
        [Route("{commit_id}")]
        public object GetById(Guid commit_id)
        {
            return base.ExecuteFunction<object>("GetById", delegate()
            {
                this.BeforeGet();

                dm.Commit result = this.API.Direct.Commits.GetById(commit_id);
                if (result == null)
                {
                    return Http404("Commit");
                }

                

                this.AfterGet(result);

                return base.Http200(new ItemResult<sdk.Commit>()
                {
                    success = true,
                    item = result.ToSDKModel()
                });
            });
        }

        partial void BeforeGet();
        partial void AfterGet(dm.Commit result);
        partial void AfterGet(List<dm.Commit> result);
        
        
        
        
       

        [HttpPost]
        [Route("")]
        public object Create(sdk.Commit commit)
        {
            return base.ExecuteFunction<object>("Create", delegate()
            {
                this.ValidateNotNull(commit, "Commit");

                this.BeforeInsert(commit);

                dm.Commit insert = commit.ToDomainModel();
              
                insert = this.API.Direct.Commits.Insert(insert);
                
                this.AfterInsert(commit, insert);

                
                sdk.Commit result = insert.ToSDKModel();

                return base.Http201(new ItemResult<sdk.Commit>()
                {
                    success = true,
                    item = result
                }
                , string.Format("api/commit/{0}", commit.commit_id));

            });

        }

        partial void BeforeInsert(sdk.Commit commit);
        partial void AfterInsert(sdk.Commit commit, dm.Commit inserted);

        [HttpPut]
        [Route("{commit_id}")]
        public object Update(Guid commit_id, sdk.Commit commit)
        {
            return base.ExecuteFunction<object>("Update", delegate()
            {
                this.ValidateNotNull(commit, "Commit");
                this.ValidateRouteMatch(commit_id, commit.commit_id, "Commit");

                commit.commit_id = commit_id;

                this.BeforeUpdate(commit);

                dm.Commit update = commit.ToDomainModel();

                update = this.API.Direct.Commits.Update(update);

                this.AfterUpdate(commit, update);
                
                
                sdk.Commit existing = this.API.Direct.Commits.GetById(update.commit_id).ToSDKModel();
                
                return base.Http200(new ItemResult<sdk.Commit>()
                {
                    success = true,
                    item = existing
                });

            });

        }

        partial void BeforeUpdate(sdk.Commit commit);
        partial void AfterUpdate(sdk.Commit commit, dm.Commit updated);

        

        [HttpDelete]
        [Route("{commit_id}")]
        public object Delete(Guid commit_id)
        {
            return base.ExecuteFunction("Delete", delegate()
            {
                dm.Commit delete = this.API.Direct.Commits.GetById(commit_id);
                if (delete == null)
                {
                    return base.Http404(@"Commit");
                }
                
                this.BeforeDelete(delete);
                
                this.API.Direct.Commits.Delete(commit_id);

                return base.Http200(new ActionResult()
                {
                    success = true,
                    message = commit_id.ToString()
                });
            });
        }

        partial void BeforeDelete(dm.Commit delete);

    }
}

