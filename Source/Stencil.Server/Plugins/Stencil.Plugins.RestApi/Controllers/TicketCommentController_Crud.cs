//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Codeable.Foundation.Common;
using Codeable.Foundation.Core;
using System;
using System.Web.Http;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using sdk = Stencil.SDK.Models;
using dm = Stencil.Domain;
using Stencil.Primary;
using Stencil.SDK;
using Stencil.Web.Controllers;
using Stencil.Web.Security;

namespace Stencil.Plugins.RestAPI.Controllers
{
    [ApiKeyHttpAuthorize]
    [RoutePrefix("api/ticketcomments")]
    public partial class TicketCommentController : HealthRestApiController
    {
        public TicketCommentController(IFoundation foundation)
            : base(foundation, "TicketComment")
        {
        }

        [HttpGet]
        [Route("{ticket_comment_id}")]
        public object GetById(Guid ticket_comment_id)
        {
            return base.ExecuteFunction<object>("GetById", delegate()
            {
                this.BeforeGet();

                sdk.TicketComment result = this.API.Index.TicketComments.GetById(ticket_comment_id);
                if (result == null)
                {
                    return Http404("TicketComment");
                }

                this.AfterGet(result);

                

                return base.Http200(new ItemResult<sdk.TicketComment>()
                {
                    success = true, 
                    item = result
                });
            });
        }

        partial void BeforeGet();
        partial void AfterGet(sdk.TicketComment result);
        partial void AfterGet(ListResult<sdk.TicketComment> result);
        
        
        [HttpGet]
        [Route("by_ticketid/{ticket_id}")]
        public object GetByTicketID(Guid ticket_id, int skip = 0, int take = 10, string order_by = "", bool descending = false)
        {
            return base.ExecuteFunction<object>("GetByTicketID", delegate ()
            {
                this.BeforeGet();

                
                ListResult<sdk.TicketComment> result = this.API.Index.TicketComments.GetByTicketID(ticket_id, skip, take, order_by, descending);
                result.success = true;

                this.AfterGet(result);

                return base.Http200(result);
            });
        }
        
        [HttpGet]
        [Route("by_commenterid/{account_id}")]
        public object GetByCommenterID(Guid account_id, int skip = 0, int take = 10, string order_by = "", bool descending = false)
        {
            return base.ExecuteFunction<object>("GetByCommenterID", delegate ()
            {
                this.BeforeGet();

                
                ListResult<sdk.TicketComment> result = this.API.Index.TicketComments.GetByCommenterID(account_id, skip, take, order_by, descending);
                result.success = true;

                this.AfterGet(result);

                return base.Http200(result);
            });
        }
        
        
        
       

        [HttpPost]
        [Route("")]
        public object Create(sdk.TicketComment ticketcomment)
        {
            return base.ExecuteFunction<object>("Create", delegate()
            {
                this.ValidateNotNull(ticketcomment, "TicketComment");

                this.BeforeInsert(ticketcomment);

                dm.TicketComment insert = ticketcomment.ToDomainModel();
              
                insert = this.API.Direct.TicketComments.Insert(insert);
                
                this.AfterInsert(ticketcomment, insert);

                
                sdk.TicketComment result = this.API.Index.TicketComments.GetById(insert.ticket_comment_id);

                return base.Http201(new ItemResult<sdk.TicketComment>()
                {
                    success = true,
                    item = result
                }
                , string.Format("api/ticketcomment/{0}", ticketcomment.ticket_comment_id));

            });

        }

        partial void BeforeInsert(sdk.TicketComment ticketcomment);
        partial void AfterInsert(sdk.TicketComment ticketcomment, dm.TicketComment inserted);

        [HttpPut]
        [Route("{ticket_comment_id}")]
        public object Update(Guid ticket_comment_id, sdk.TicketComment ticketcomment)
        {
            return base.ExecuteFunction<object>("Update", delegate()
            {
                this.ValidateNotNull(ticketcomment, "TicketComment");
                this.ValidateRouteMatch(ticket_comment_id, ticketcomment.ticket_comment_id, "TicketComment");

                ticketcomment.ticket_comment_id = ticket_comment_id;

                this.BeforeUpdate(ticketcomment);

                dm.TicketComment update = ticketcomment.ToDomainModel();

                update = this.API.Direct.TicketComments.Update(update);

                this.AfterUpdate(ticketcomment, update);
                
                
                sdk.TicketComment existing = this.API.Index.TicketComments.GetById(update.ticket_comment_id);
                
                
                return base.Http200(new ItemResult<sdk.TicketComment>()
                {
                    success = true,
                    item = existing
                });

            });

        }

        partial void BeforeUpdate(sdk.TicketComment ticketcomment);
        partial void AfterUpdate(sdk.TicketComment ticketcomment, dm.TicketComment updated);

        

        [HttpDelete]
        [Route("{ticket_comment_id}")]
        public object Delete(Guid ticket_comment_id)
        {
            return base.ExecuteFunction("Delete", delegate()
            {
                dm.TicketComment delete = this.API.Direct.TicketComments.GetById(ticket_comment_id);
                if (delete == null)
                {
                    return base.Http404(@"TicketComment");
                }
                
                this.BeforeDelete(delete);
                
                this.API.Direct.TicketComments.Delete(ticket_comment_id);

                return base.Http200(new ActionResult()
                {
                    success = true,
                    message = ticket_comment_id.ToString()
                });
            });
        }

        partial void BeforeDelete(dm.TicketComment delete);

    }
}

