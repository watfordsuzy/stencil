name: Build and Test Solution

on:
  push:
    branches:
      - develop
      - master
  pull_request:

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./Source/Stencil.Server/Stencil.Server.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
      
    - name: Add Local Configuration Files
      run: |
        New-Item -ItemType File Source\Stencil.Server\DbAndIndexMigrator\localAppSettings.config
        New-Item -ItemType File Source\Stencil.Server\DbAndIndexMigrator\localConnectionStrings.config
        New-Item -ItemType File Source\Stencil.Server\ElasticMappingGenerator\localAppSettings.config

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Test
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $xunit = '~/.nuget/packages/xunit.runner.console/2.4.1/tools/net472/xunit.console.exe'
        $testFiles = Get-ChildItem -recurse -include xunit*.dll | `
          ForEach-Object { $_.directory.fullname } | `
          Get-ChildItem | `
          Where-Object { $_ -like '*tests.dll' } | `
          Select-Object -Unique FullName | `
          ForEach-Object { $_.FullName }
        & $xunit @testFiles
